Marshalling and unmarshalling, configuration files
Lesson 11
30 Nov 2024
Tags: golang, go

Pavel Tišnovský
Red Hat, Inc.
email@email.email
https://github.com/RedHatOfficial/GoCourse
@RedHat



* Sources
- [[https://github.com/RedHatOfficial/GoCourse]]
.image ./common/qr_address.png



* Gophers
#The Go gopher was designed by Renee French. (http://reneefrench.blogspot.com/)
#Source https://golang.org/doc/gopher/fiveyears.jpg
#The design and this image is licensed under the Creative Commons 3.0 Attributions license.
.image ./common/fiveyears.jpg _ 900



* Marshalling and unmarshalling

- process of transforming the memory representation of an object into a data format suitable for storage or transmission
- unmarshalling (un-marshalling) performs opposite operation
- allows communication between client and server
- intermediate (serialized) object representation
- marshalling vs serialization (we use serialization in order to implement marshalling)



* Data formats

- XML
- JSON
- JAXB
- gob
- CBOR
- BSON



* Marshalling in Go

- package `encoding`

- encodes the receiver into a binary form and returns the result
.code lesson11/BinaryMarshaler.go

- encodes the receiver into UTF-8-encoded text and returns the result
.code lesson11/TextMarshaler.go

- can be implemented by any structure (where needed)



* Unmarshalling in Go

- package `encoding` as well

- must be able to decode the form generated by MarshalBinary
.code lesson11/BinaryUnmarshaler.go

- must be able to decode the form generated by MarshalText
.code lesson11/TextUnmarshaler.go

- can be implemented by any structure (where needed)



* JSON

- `encoding/json` package

.code lesson11/JsonMarshal.go
.code lesson11/JsonMarshalIndent.go
.code lesson11/JsonUnmarshal.go

* JSON marshaling

.play lesson11/json_marshal_struct.go

* Indenting the JSON output

.play lesson11/json_marshal_struct_indent.go

* Attribute names in JSON

.play lesson11/json_marshal_struct_names.go

* Skip attribute(s)

.play lesson11/json_marshal_struct_names_skip.go

* Marshaling array

.play lesson11/json_marshal_array.go

* Array of any values

- `any` is an alias for `interface{}`

.play lesson11/json_marshal_array_any.go

* Map

.play lesson11/json_marshal_map.go

* Floating point numbers

.play lesson11/json_marshal_floats.go

* Floating point special values 1/2

.play lesson11/json_marshal_floats_specvalues.go /^package main/,/^func main/

* Floating point special values 2/2

.play lesson11/json_marshal_floats_specvalues.go /^func main/,/^}/

* Floating point special values with error checks 1/2

.play lesson11/json_marshal_floats_specvalues_err.go /^package main/,/^func main/

* Floating point special values with error checks 2/2

.play lesson11/json_marshal_floats_specvalues_err.go /^func main/,/^}/

* Unmarshalling 1/2

.play lesson11/json_unmarshal.go /^package main/,/^func main/

* Unmarshalling 2/2

.play lesson11/json_unmarshal.go /^func main/,/^}/

* Unmarshalling with error checking

.play lesson11/json_unmarshal_error.go

* XML

- `encoding/xml` package
- attributes -> nodes or attributes
- root node name specification
- sub-nodes support

* gob

* BSON

* CBOR

- Concise Binary Object Representation

* Size comparisons

.code lesson11/sizes.txt

* Configuration files

- INI files
- TOML
- YAML
- even JSON, XML etc.


#last slide
* More Gophers
#The Go gopher was designed by Renee French. (http://reneefrench.blogspot.com/)
#Source https://golang.org/doc/gopher/bumper.png
#The design and this image is licensed under the Creative Commons 3.0 Attributions license.
.image ./common/bumper.png  _ 900
